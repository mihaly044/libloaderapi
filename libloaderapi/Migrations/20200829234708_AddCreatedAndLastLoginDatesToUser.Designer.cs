// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using libloaderapi.Domain.Database;

namespace libloaderapi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200829234708_AddCreatedAndLastLoginDatesToUser")]
    partial class AddCreatedAndLastLoginDatesToUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BucketType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Sha256")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00771ea4-a5d7-417c-bd14-b37146b0b1ed"),
                            Name = "LibAdmin"
                        },
                        new
                        {
                            Id = new Guid("1d1ea70c-2999-403c-bb8a-185feee3d625"),
                            Name = "LibUser"
                        },
                        new
                        {
                            Id = new Guid("9ecb0a15-7464-408a-8e9e-0791125eb91b"),
                            Name = "LibClient"
                        });
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03f09698-7c52-4657-b650-59b9f2af0d1d"),
                            CreatedAt = new DateTime(2020, 8, 29, 23, 47, 7, 664, DateTimeKind.Utc).AddTicks(1575),
                            Name = "admin",
                            Password = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08"
                        },
                        new
                        {
                            Id = new Guid("b5324445-d79a-457a-ab63-3a56d443a964"),
                            CreatedAt = new DateTime(2020, 8, 29, 23, 47, 7, 664, DateTimeKind.Utc).AddTicks(2566),
                            Name = "user",
                            Password = "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08"
                        });
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("03f09698-7c52-4657-b650-59b9f2af0d1d"),
                            RoleId = new Guid("00771ea4-a5d7-417c-bd14-b37146b0b1ed")
                        },
                        new
                        {
                            UserId = new Guid("b5324445-d79a-457a-ab63-3a56d443a964"),
                            RoleId = new Guid("1d1ea70c-2999-403c-bb8a-185feee3d625")
                        });
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.Client", b =>
                {
                    b.HasOne("libloaderapi.Domain.Database.Models.User", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.UserRole", b =>
                {
                    b.HasOne("libloaderapi.Domain.Database.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libloaderapi.Domain.Database.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
