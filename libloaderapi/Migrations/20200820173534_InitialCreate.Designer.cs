// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using libloaderapi.Domain.Database;

namespace libloaderapi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200820173534_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.Binary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Sha1")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Binaries");
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c3b97d9-dfd1-4466-8a57-2a3b1eff9a82"),
                            Name = "LibAdmin"
                        },
                        new
                        {
                            Id = new Guid("92c2517d-6f2f-4a93-9345-0293a65e0936"),
                            Name = "LibUser"
                        },
                        new
                        {
                            Id = new Guid("3b82c301-dea3-4054-8a22-475b86261384"),
                            Name = "LibClient"
                        });
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8f4e084-8dc2-4af6-8d7a-c596e8b87d4f"),
                            Name = "admin",
                            Password = "nimda"
                        },
                        new
                        {
                            Id = new Guid("a310e717-cc64-45dd-922e-1974d2fd5a80"),
                            Name = "user",
                            Password = "resu"
                        },
                        new
                        {
                            Id = new Guid("785fb01c-2e8f-40f5-8b69-ec082842447f"),
                            Name = "client",
                            Password = "tneilc"
                        });
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d8f4e084-8dc2-4af6-8d7a-c596e8b87d4f"),
                            RoleId = new Guid("2c3b97d9-dfd1-4466-8a57-2a3b1eff9a82")
                        },
                        new
                        {
                            UserId = new Guid("a310e717-cc64-45dd-922e-1974d2fd5a80"),
                            RoleId = new Guid("92c2517d-6f2f-4a93-9345-0293a65e0936")
                        },
                        new
                        {
                            UserId = new Guid("785fb01c-2e8f-40f5-8b69-ec082842447f"),
                            RoleId = new Guid("3b82c301-dea3-4054-8a22-475b86261384")
                        });
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.Binary", b =>
                {
                    b.HasOne("libloaderapi.Domain.Database.Models.User", "User")
                        .WithMany("Binaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.UserRole", b =>
                {
                    b.HasOne("libloaderapi.Domain.Database.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libloaderapi.Domain.Database.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
