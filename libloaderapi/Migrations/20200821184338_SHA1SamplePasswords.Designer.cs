// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using libloaderapi.Domain.Database;

namespace libloaderapi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200821184338_SHA1SamplePasswords")]
    partial class SHA1SamplePasswords
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.Binary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Sha1")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Binaries");
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ba84c73-5ed2-4789-8827-e8f730f42a82"),
                            Name = "LibAdmin"
                        },
                        new
                        {
                            Id = new Guid("a43ea262-e4bd-463d-ad08-a38703469c47"),
                            Name = "LibUser"
                        },
                        new
                        {
                            Id = new Guid("ff663d9f-2fa8-4194-a936-4ad120667ca0"),
                            Name = "LibClient"
                        });
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("241898df-227b-4c9b-87a1-7ff297e0a501"),
                            Name = "admin",
                            Password = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"
                        },
                        new
                        {
                            Id = new Guid("8c01409d-0e8a-437a-8609-b3263bb36673"),
                            Name = "user",
                            Password = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"
                        },
                        new
                        {
                            Id = new Guid("e05e40e9-59ef-4a96-bb25-9f0b92d87d8d"),
                            Name = "client",
                            Password = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"
                        });
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("241898df-227b-4c9b-87a1-7ff297e0a501"),
                            RoleId = new Guid("3ba84c73-5ed2-4789-8827-e8f730f42a82")
                        },
                        new
                        {
                            UserId = new Guid("8c01409d-0e8a-437a-8609-b3263bb36673"),
                            RoleId = new Guid("a43ea262-e4bd-463d-ad08-a38703469c47")
                        },
                        new
                        {
                            UserId = new Guid("e05e40e9-59ef-4a96-bb25-9f0b92d87d8d"),
                            RoleId = new Guid("ff663d9f-2fa8-4194-a936-4ad120667ca0")
                        });
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.Binary", b =>
                {
                    b.HasOne("libloaderapi.Domain.Database.Models.User", "User")
                        .WithMany("Binaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("libloaderapi.Domain.Database.Models.UserRole", b =>
                {
                    b.HasOne("libloaderapi.Domain.Database.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("libloaderapi.Domain.Database.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
